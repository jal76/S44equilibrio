#include "constants.h"

piece base, turret, mantlet, barrel, flare, coaxflare, exhaust, brakeright, brakeleft;
piece wheel1, wheel2;
 
static-var  restore_delay, rock, aim2, reloading, mainHead;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Coax MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 turret
#define SMOKEPIECE3 mantlet
#define SMOKEPIECE4 exhaust

#include "SmokeUnit_GPL.h" // Thanks again to Argh


//hiding fx emit points

#define FX_HIDE\
	hide flare;\
	hide brakeleft;\
	hide brakeright;\
	hide coaxflare;\
	
// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for HitWeapId_S44
#define ARMOUR		3542
#include "HitWeapId_S44.h"

// definitions for wheels
#define WHEEL_SPIN		<500>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define TURR_TRAVERSE	<19> // manual?
#define TURR_ELEVATE	<13>
#define COAX_ARC		<3>

// definitions for weapons behaviour
#define RELOAD		3000 // time in milliseconds between shots
#define RECOIL		[-2] // distance to recoil the gun
#define RETURN_SPEED	[5] // speed at which the barrel returns

#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH	1024+7
#define MEDIUM_MUZZLEFLASH	1024+8
#define MEDIUM_MUZZLEDUST	1024+9
#define MuzzleBrakeSmoke	1024+10

// tracers
#define SMALL_TRACER 	2048+4


Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	aim2 = FALSE;
	reloading = FALSE;
	// start continuous scripts
	start-script SmokeUnit_GPL();
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis 0 speed TURR_TRAVERSE;
	turn mantlet to x-axis 0 speed TURR_ELEVATE;
}

StartMoving()
{
	signal SIG_MOVE;
	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	signal SIG_MOVE;
 	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming AP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	mainHead = heading;
		
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn mantlet to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn mantlet around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx MEDIUM_MUZZLEFLASH from flare;
	emit-sfx MEDIUM_MUZZLEDUST from flare;
	//emit-sfx MuzzleBrakeSmoke from brakeright;
	//emit-sfx MuzzleBrakeSmoke from brakeleft;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 2 - Main cannon, AP
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimWeapon2(heading, pitch)
{
	aim2 = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	mainHead = heading;
		
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn mantlet to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn mantlet around x-axis;
	
	start-script RestoreAfterDelay();
	aim2 = FALSE;
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	
	emit-sfx MEDIUM_MUZZLEFLASH from flare;
	emit-sfx MEDIUM_MUZZLEDUST from flare;
	//emit-sfx MuzzleBrakeSmoke from brakeright;
	//emit-sfx MuzzleBrakeSmoke from brakeleft;	
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 3 - Coax MG
QueryWeapon3 (piecenum)
	{
	piecenum = coaxflare;
	}

AimFromWeapon3 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon3(heading, pitch)
	{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	if (mainHead > 0) {
	  if (heading < mainHead - COAX_ARC || heading > mainHead + COAX_ARC) return 0;
	}
	if (mainHead < 0) {
	  if (heading > mainHead - COAX_ARC || heading < mainHead + COAX_ARC) return 0;		
	}
	
	//turn turret to y-axis heading speed TURR_TRAVERSE;
	wait-for-turn turret around y-axis;
	
	start-script RestoreAfterDelay();
	return (1);
	}

FireWeapon3()
	{
	rock = FALSE;
	
	// TODO: nice SFX
	emit-sfx SMALL_TRACER from coaxflare;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx SMALL_TRACER from coaxflare;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx SMALL_TRACER from coaxflare;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
	sleep 67;
	return(0);
	}

AimFromWeapon4(piecenum) //bulletproof effect 
{
	piecenum = base;
}

QueryWeapon4(piecenum)
{
	piecenum = base;
}

AimWeapon4(heading, pitch)
{
return (1);
}

FireWeapon4()
{
return (0);
}



// TODO: make this pretty
Killed(severity, corpsetype)
{
	if(severity <= 1000)
	{
		corpsetype = 1;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 1;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL;
	explode mantlet type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
}

