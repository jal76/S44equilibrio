#include "constants.h"

piece  base, turret, backblast, rails, rocket1, rocket2, rocket3, rocket4, rocket5, rocket6, rocket7, rocket8;
piece  rocket9, rocket10, rocket11, rocket12, rocket13, rocket14, rocket15, rocket16, wheel1, wheel2, wheel3;
 
static-var  restore_delay, rock, reloading, mainHead, isDeployed, isDeploying, isFiring, normalSpeed, rocket, canMove, bMoving;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Machinegun
#define SIG_DEPLOY	4
#define SIG_NOMOVE	8
// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 rails
#define SMOKEPIECE3 wheel1
#define SMOKEPIECE4 wheel2

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//how long the unit appears on the map after firing (in ms)
#define VISIBLE_PERIOD	10000
//hiding FX emit points
#define FX_HIDE\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

//#include "RockUnit_Set.h"

// definitions for HitWeap_Set
#define HIT_ROCK_SPEED	<105>
#define HIT_RESTORE_SPEED	<30>

#include "HitWeap_Set.h"

// definitions for wheels
#define WHEEL_SPIN		<500>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define TURR_TRAVERSE	<100> // very light
#define TURR_ELEVATE	<100> //it's just a machinegun on a pivot

// definitions for weapons behaviour
#define MOVE_DELAY		3000


//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MEDIUM_Muzzleflash 1024+7



Create()
{
	// init vars

	reloading = FALSE;
	isDeployed = FALSE;
    isDeploying = FALSE;
    isFiring = FALSE;
	normalSpeed = get MAX_SPEED;
	rocket = 0;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	canMove = TRUE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn rails to x-axis <0.000000> speed <100>;
	canMove = TRUE;
}

RestoreRockets(time)
{
	//get PRINT (666);
	sleep time;
	show rocket1;
	show rocket2;
	show rocket3;
	show rocket4;
	show rocket5;
	show rocket6;
	show rocket7;
	show rocket8;
	show rocket9;
	show rocket10;
	show rocket11;
	show rocket12;
	show rocket13;
	show rocket14;
	show rocket15;
	show rocket16;
	rocket = 0;
}

Deploy() 
{
    if ((isDeployed && (!isDeploying)) || (isDeploying && (!isDeployed))) {
        return;
    }
    signal SIG_DEPLOY;
	set-signal-mask SIG_DEPLOY;
    isDeploying = TRUE;
	//TODO: deploy anim
	SET MAX_SPEED to normalSpeed / 500;
	// Emulate delay by turning an empty piece. This way, even if interrupted by signals, next call will start from the place where this ended
	turn backblast to x-axis 0 now;
    turn backblast to x-axis <30> speed <15>;
	wait-for-turn backblast around x-axis;
    turn backblast to x-axis 0 now;
	isDeployed = TRUE;
    isDeploying = FALSE;
}

UnDeploy() 
{
	// don't undeploy while firing
	if(isFiring || ((!isDeployed) && (!isDeploying)) || (isDeployed && isDeploying)) {
		return;
	}
    signal SIG_DEPLOY;
    isDeploying = TRUE;
	set-signal-mask SIG_DEPLOY;
	// Same as above
	turn rails to x-axis 0 speed TURR_ELEVATE;
	turn backblast to x-axis 0 now;
    turn backblast to x-axis <30> speed <3>;
	wait-for-turn backblast around x-axis;
    turn backblast to x-axis 0 now;
	wait-for-turn rails around x-axis;
	set MAX_SPEED to normalSpeed;
    isDeploying = FALSE;
	isDeployed = FALSE;
}

// This keeps the unit from turning while firing
KeepHeading()
{
	var curHeading;
	signal SIG_NOMOVE;
	set-signal-mask SIG_NOMOVE;
	curHeading = get HEADING;
	while(!canMove)
	{
		sleep 30;
		set HEADING to curHeading;
		set MAX_SPEED to normalSpeed / 500;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script UnDeploy();
	bMoving = TRUE;
 	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel3 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = FALSE;
 	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
  	stop-spin wheel3 around x-axis;
	//start-script Deploy();
}

// thanks to KDR_11k for the deploy/undeploy stuff from KP KDR edit 'pointer'


SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	if (rocket == 1) {
		piecenum = rocket1;
		hide rocket1;
	}
	else if (rocket == 2) {
		piecenum = rocket2;
		hide rocket2;
	}
	else if (rocket == 3) {
		piecenum = rocket3;
		hide rocket3;
	}
	else if (rocket == 4) {
		piecenum = rocket4;
		hide rocket4;
	}
	else if (rocket == 5) {
		piecenum = rocket5;
		hide rocket5;
	}
	else if (rocket == 6) {
		piecenum = rocket6;
		hide rocket6;
	}
	else if (rocket == 7) {
		piecenum = rocket7;
		hide rocket7;
	}
	else if (rocket == 8) {
		piecenum = rocket8;
		hide rocket8;
	}
	else if (rocket == 9) {
		piecenum = rocket9;
		hide rocket9;
	}
	else if (rocket == 10) {
		piecenum = rocket10;
		hide rocket10;
	}
	else if (rocket == 11) {
		piecenum = rocket11;
		hide rocket11;
	}
	else if (rocket == 12) {
		piecenum = rocket12;
		hide rocket12;
	}
	else if (rocket == 13) {
		piecenum = rocket13;
		hide rocket13;
	}
	else if (rocket == 14) {
		piecenum = rocket14;
		hide rocket14;
	}
	else if (rocket == 15) {
		piecenum = rocket15;
		hide rocket15;
	}
	else if (rocket == 16) {
		piecenum = rocket16;
		hide rocket16;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = rails;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script Deploy();
	while (!isDeployed)
	{
		sleep 30;
	}
	canMove = FALSE;
	mainHead = heading;
	turn rails to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn rails around x-axis;
	canMove = TRUE;
	//start-script RestoreAfterDelay();
	return (TRUE);
}

FireWeapon1()
{
	// freeze in place
	If(canMove)
	{
		start-script KeepHeading();
		canMove = FALSE;
	}
	//emit-sfx MEDIUM_Muzzleflash from rocket1;
    isFiring = TRUE;
	//start-script Reload(); // start reload timer after firing
	return 0;
}

Shot1(something)
{
	emit-sfx 1032 from backblast;
	rocket = rocket + 1;
}

EndBurst1()
{
	// unfreeze
	sleep MOVE_DELAY;
	canMove = TRUE;
    isFiring = FALSE;
	signal SIG_NOMOVE;
	start-script Undeploy();
}
	
// TODO: make this pretty
Killed(severity, corpsetype)
{
	if(severity <= 1000)
	{
		corpsetype = 1;
		explode rails type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 1;
	explode rails type EXPLODE_ON_HIT | FIRE | FALL;
	explode rocket1 type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT;
}

